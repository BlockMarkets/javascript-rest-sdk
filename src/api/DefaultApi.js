/**
 * BlockMarkets Cryptocurrency API
 * The BlockMarkets API provides real-time and historical market data on cryptocurrencies from the world's leading crypto exchanges. Sign up for a free, unlimited API key at [BlockMarkets Cryptocurrency API](https://www.blockmarkets.io/cryptocurrency-api).
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Empty'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Empty'));
  } else {
    // Browser globals (root is window)
    if (!root.blockmarkets) {
      root.blockmarkets = {};
    }
    root.blockmarkets.DefaultApi = factory(root.blockmarkets.ApiClient, root.blockmarkets.Empty);
  }
}(this, function(ApiClient, Empty) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Returns the latest available benchmark rates for a specific asset.
     * @param {String} symbol The asset symbol (see /assets)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.benchmarkRateWithHttpInfo = function(symbol) {
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling benchmarkRate");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/rates/benchmark/{symbol}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the latest available benchmark rates for a specific asset.
     * @param {String} symbol The asset symbol (see /assets)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.benchmarkRate = function(symbol) {
      return this.benchmarkRateWithHttpInfo(symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns historical benchmark rates for an asset. Requires premium subscription.
     * @param {String} symbol The asset symbol (see /assets)
     * @param {Object} opts Optional parameters
     * @param {String} opts.close The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.benchmarkRateHistoryWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling benchmarkRateHistory");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'close': opts['close'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/rates/benchmark/{symbol}/history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns historical benchmark rates for an asset. Requires premium subscription.
     * @param {String} symbol The asset symbol (see /assets)
     * @param {Object} opts Optional parameters
     * @param {String} opts.close The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.benchmarkRateHistory = function(symbol, opts) {
      return this.benchmarkRateHistoryWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of all markets (base and quote) for a specific asset.
     * @param {String} symbol The asset symbol (see /assets)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.listAssetMarketsWithHttpInfo = function(symbol) {
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling listAssetMarkets");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/assets/{symbol}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of all markets (base and quote) for a specific asset.
     * @param {String} symbol The asset symbol (see /assets)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.listAssetMarkets = function(symbol) {
      return this.listAssetMarketsWithHttpInfo(symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of supported assets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.listAssetsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/assets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of supported assets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.listAssets = function() {
      return this.listAssetsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of supported USD benchmark rates.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.listBenchmarkRatesWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/rates/benchmark', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of supported USD benchmark rates.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.listBenchmarkRates = function() {
      return this.listBenchmarkRatesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of markets for a specific exchange.
     * @param {String} exchange The 4-char exchange code (see /exchanges)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.listExchangeMarketsWithHttpInfo = function(exchange) {
      var postBody = null;

      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling listExchangeMarkets");
      }


      var pathParams = {
        'exchange': exchange
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/exchanges/{exchange}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of markets for a specific exchange.
     * @param {String} exchange The 4-char exchange code (see /exchanges)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.listExchangeMarkets = function(exchange) {
      return this.listExchangeMarketsWithHttpInfo(exchange)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of supported exchanges.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.listExchangesWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/exchanges', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of supported exchanges.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.listExchanges = function() {
      return this.listExchangesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of supported markets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.listMarketsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/markets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of supported markets.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.listMarkets = function() {
      return this.listMarketsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of markets for a specific asset pair.
     * @param {String} pair The asset pair (see /pairs)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.listPairMarketsWithHttpInfo = function(pair) {
      var postBody = null;

      // verify the required parameter 'pair' is set
      if (pair === undefined || pair === null) {
        throw new Error("Missing the required parameter 'pair' when calling listPairMarkets");
      }


      var pathParams = {
        'pair': pair
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/pairs/{pair}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of markets for a specific asset pair.
     * @param {String} pair The asset pair (see /pairs)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.listPairMarkets = function(pair) {
      return this.listPairMarketsWithHttpInfo(pair)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of supported asset pairs.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.listPairsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/pairs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of supported asset pairs.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.listPairs = function() {
      return this.listPairsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a list of supported USD spot rates.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.listSpotRatesWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/rates/spot', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a list of supported USD spot rates.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.listSpotRates = function() {
      return this.listSpotRatesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.
     * @param {String} exchange The 4-char exchange code (see /exchanges)
     * @param {String} pair The asset pair (see /pairs)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.marketBookWithHttpInfo = function(exchange, pair) {
      var postBody = null;

      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling marketBook");
      }

      // verify the required parameter 'pair' is set
      if (pair === undefined || pair === null) {
        throw new Error("Missing the required parameter 'pair' when calling marketBook");
      }


      var pathParams = {
        'exchange': exchange,
        'pair': pair
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/markets/{exchange}/{pair}/book', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.
     * @param {String} exchange The 4-char exchange code (see /exchanges)
     * @param {String} pair The asset pair (see /pairs)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.marketBook = function(exchange, pair) {
      return this.marketBookWithHttpInfo(exchange, pair)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns OHLCV history for a market pair.
     * @param {String} exchange The 4-char exchange code (see /exchanges)
     * @param {String} pair The asset pair (see /pairs)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
     * @param {Number} opts.interval Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440)
     * @param {String} opts.start Start datetime in ISO 8601
     * @param {String} opts.end End datetime in ISO 8601
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.marketOHLCVWithHttpInfo = function(exchange, pair, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling marketOHLCV");
      }

      // verify the required parameter 'pair' is set
      if (pair === undefined || pair === null) {
        throw new Error("Missing the required parameter 'pair' when calling marketOHLCV");
      }


      var pathParams = {
        'exchange': exchange,
        'pair': pair
      };
      var queryParams = {
        'limit': opts['limit'],
        'interval': opts['interval'],
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/markets/{exchange}/{pair}/ohlcv', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns OHLCV history for a market pair.
     * @param {String} exchange The 4-char exchange code (see /exchanges)
     * @param {String} pair The asset pair (see /pairs)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
     * @param {Number} opts.interval Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440)
     * @param {String} opts.start Start datetime in ISO 8601
     * @param {String} opts.end End datetime in ISO 8601
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.marketOHLCV = function(exchange, pair, opts) {
      return this.marketOHLCVWithHttpInfo(exchange, pair, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the latest ticker for a market pair.
     * @param {String} exchange The 4-char exchange code (see /exchanges)
     * @param {String} pair The asset pair (see /pairs)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.marketTickerWithHttpInfo = function(exchange, pair) {
      var postBody = null;

      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling marketTicker");
      }

      // verify the required parameter 'pair' is set
      if (pair === undefined || pair === null) {
        throw new Error("Missing the required parameter 'pair' when calling marketTicker");
      }


      var pathParams = {
        'exchange': exchange,
        'pair': pair
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/markets/{exchange}/{pair}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the latest ticker for a market pair.
     * @param {String} exchange The 4-char exchange code (see /exchanges)
     * @param {String} pair The asset pair (see /pairs)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.marketTicker = function(exchange, pair) {
      return this.marketTickerWithHttpInfo(exchange, pair)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns trades for a market pair. Requires premium subscription.
     * @param {String} exchange The 4-char exchange code (see /exchanges)
     * @param {String} pair The asset pair (see /pairs)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
     * @param {String} opts.start Start datetime in ISO 8601
     * @param {String} opts.end End datetime in ISO 8601
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.marketTradesWithHttpInfo = function(exchange, pair, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling marketTrades");
      }

      // verify the required parameter 'pair' is set
      if (pair === undefined || pair === null) {
        throw new Error("Missing the required parameter 'pair' when calling marketTrades");
      }


      var pathParams = {
        'exchange': exchange,
        'pair': pair
      };
      var queryParams = {
        'limit': opts['limit'],
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/markets/{exchange}/{pair}/trades', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns trades for a market pair. Requires premium subscription.
     * @param {String} exchange The 4-char exchange code (see /exchanges)
     * @param {String} pair The asset pair (see /pairs)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
     * @param {String} opts.start Start datetime in ISO 8601
     * @param {String} opts.end End datetime in ISO 8601
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.marketTrades = function(exchange, pair, opts) {
      return this.marketTradesWithHttpInfo(exchange, pair, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the last USD spot rate for an asset.
     * @param {String} symbol The asset symbol (see /assets)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.spotRateWithHttpInfo = function(symbol) {
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling spotRate");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/rates/spot/{symbol}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the last USD spot rate for an asset.
     * @param {String} symbol The asset symbol (see /assets)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.spotRate = function(symbol) {
      return this.spotRateWithHttpInfo(symbol)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns historical spot rates for an asset. Requires premium subscription.
     * @param {String} symbol The asset symbol (see /assets)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
     * @param {String} opts.start Start datetime in ISO 8601
     * @param {String} opts.end End datetime in ISO 8601
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.spotRateHistoryWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling spotRateHistory");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'limit': opts['limit'],
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/rates/spot/{symbol}/history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns historical spot rates for an asset. Requires premium subscription.
     * @param {String} symbol The asset symbol (see /assets)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
     * @param {String} opts.start Start datetime in ISO 8601
     * @param {String} opts.end End datetime in ISO 8601
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.spotRateHistory = function(symbol, opts) {
      return this.spotRateHistoryWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns the OHLCV history for a spot rate.
     * @param {String} symbol The asset symbol (see /assets)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
     * @param {Number} opts.interval Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440)
     * @param {String} opts.start Start datetime in ISO 8601
     * @param {String} opts.end End datetime in ISO 8601
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Empty} and HTTP response
     */
    this.spotRateOHLCVWithHttpInfo = function(symbol, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'symbol' is set
      if (symbol === undefined || symbol === null) {
        throw new Error("Missing the required parameter 'symbol' when calling spotRateOHLCV");
      }


      var pathParams = {
        'symbol': symbol
      };
      var queryParams = {
        'limit': opts['limit'],
        'interval': opts['interval'],
        'start': opts['start'],
        'end': opts['end'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Empty;

      return this.apiClient.callApi(
        '/v1/rates/spot/{symbol}/ohlcv', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns the OHLCV history for a spot rate.
     * @param {String} symbol The asset symbol (see /assets)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
     * @param {Number} opts.interval Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440)
     * @param {String} opts.start Start datetime in ISO 8601
     * @param {String} opts.end End datetime in ISO 8601
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Empty}
     */
    this.spotRateOHLCV = function(symbol, opts) {
      return this.spotRateOHLCVWithHttpInfo(symbol, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
